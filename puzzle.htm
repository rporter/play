<!DOCTYPE html>
<html>
  <head>
    <title>Match the Colours</title>
    <style>
      html {
        background :black;
      }
      div.board {
        width : 60%;
        margin : auto;
        background : white;
        aspect-ratio: 1 / 1;
        display: grid;
      }
      div.square {
        border : 1pt solid black;
      }
      div.covered {
        background : grey !important;
      }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
      // stolen from the internet
      function shuffle(array) {
        let currentIndex = array.length;

        // While there remain elements to shuffle...
        while (currentIndex != 0) {

          // Pick a remaining element...
          let randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex--;

          // And swap it with the current element.
          [array[currentIndex], array[randomIndex]] = [
            array[randomIndex], array[currentIndex]];
        }
      }

      class Board {

        static #colours = ['white', 'lightseagreen', 'lightcoral', 'orange', 'red', 'yellow', 'violet', 'lightgreen', 'blue', 'green', 'blueviolet', 'lightpink', 'skyblue'];

        constructor({x=4, y=4} = {}) {
          this.x = x;
          this.y = y;
          this.attempts = {
            attempts : 0,
            fails : 0,
            matches : 0
          }
          // use min(floor(sz/2), len(cols)) as pallette, shuffle pallette. multiply pallette * ceil(sz/len(pallette)), slice and shuffle.
          let pallette = Board.#colours.slice(0, Math.min(Math.floor(this.size/2), Board.#colours.length));
          shuffle(pallette);
          while (pallette.length < this.size) {
            pallette = pallette.concat(pallette);
          }
          this.order = pallette.slice(0, this.size);
          shuffle(this.order);
          this.occurs = new Map();
          for (const c of this.order) {
            if (c in this.occurs)
              this.occurs[c]++;
            else
              this.occurs[c]=1;
          }
          console.log(this.order, this.occurs);
        }

        get size() {
          return this.x * this.y;
        }

        *squares() {
          for (let y = 0; y < this.y; y++) {
            for (let x = 0; x < this.x; x++) {
              let idx = y*this.x + x;
              yield {x:x, y:y, idx:idx, colour:this.order[idx]};
            }
          }
        }

        result(selected) {
          let unique = (new Set(selected)).size,
              count = selected.length,
              fail = unique > 1,
              more = !fail && (count < this.occurs[selected[0]]);

          this.attempts.attempts += !more;
          this.attempts.fails += fail;
          this.attempts.matches += !more && !fail;

          return {
              attempts : this.attempts.attempts,
              fails : this.attempts.fails,
              matches : this.attempts.matches,
              more : more,
              fail : fail
            }

        }

      }


      $(document).ready(function() {

        const
          url = new URL(window.location.href),
          hparams = url.searchParams,
          params = {
          };

        function setparam(param) {
          if (hparams.has(param)) {
            const raw = hparams.get(param),
                  val = Number(raw);
            if (0 < val <= 16) {
              Object.set(params, param) = val;
            } else {
              alert('Param ' + param + ' : value "' + raw + '" out of range');
          }
        }

        setparam('x');
        setparam('y');
        console.log(params);

        const board = new (Function.prototype.bind.apply(Board, [null, params, ])),
              $board = $('div.board').css('grid-template', 'repeat('+board.y+', 1fr) / repeat('+board.x+', 1fr)') ;
        let play = true;

        for (let square of board.squares()) {
          $('<div/>').prop('colour', square.colour)
                     .prop('id', square.idx)
                     .addClass('square covered')
                     .css('background', square.colour)
                     .appendTo($board);
        }

        $('div.square.covered').click(function(it){
          let $it = $(it.target);
          if (play && $it.hasClass('covered')) {
            $it.toggleClass('covered').toggleClass('peek');
            let $peek = $('div.peek', $board),
                status = board.result($peek.map(function(i, it){return $(it).prop('colour')}));
            console.log(status);
            if (!status.more) {
              play = false;
              setTimeout(function() {
                $peek.fadeOut(200, function() {
                  $peek.fadeIn(200, function() {
                    if (play) {
                      return;
                    }
                    if (status.fail) {
                      $peek.addClass('covered');
                    } else {
                      $peek.addClass('uncovered');
                    }
                    $peek.removeClass('peek');
                    play = true;
                  })
                })
              }, 200);
            }
          }
        });
      });
    </script>
  </head>
  <body>
    <div class='board'/>
  </body>
</html>
